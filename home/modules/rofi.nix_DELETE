{ config, lib, pkgs, stable, unstable, userSettings, ... }:

{

  imports = [
  #  ../ejvend/config/rofi/power.nix
    #../ejvend/config/rofi/brightness.nix
  ];

  #config = lib.mkIf (pkgs.stdenv.isLinux && config.services.xserver.enable) {

    #home-manager.users.${config.user} = {

    #  home.packages = with pkgs; [
    #    jq # Required for rofi-systemd
    #  ];
      home.file.".config/rofi/themes" = {
        recursive = true;
        source = ../ejvend/config/rofi/themes;
      };

      programs.rofi = {
        enable = true;
        cycle = true;
        location = "center";
        pass = { };
        plugins = [
          #pkgs.rofi-calc
          #pkgs.rofi-emoji
          #pkgs.rofi-systemd
        ];
        theme =
          let
          #  inherit (config.home-manager.users.${config.user}.lib.formats.rasi) mkLiteral;
            inherit (config.lib.formats.rasi) mkLiteral;
            inherit (config.lib.stylix.colors.withHashtag) base00 base01 base05 base06 base08 base0D;
          in
          {

            # Inspired by https://github.com/sherubthakur/dotfiles/blob/master/users/modules/desktop-environment/rofi/launcher.rasi

            "*" = {
              background = mkLiteral "${base00}";
              lightbg = mkLiteral "${base01}"; 
              red = mkLiteral "${base08}";
              blue = mkLiteral "${base0D}";
              lightfg = mkLiteral "${base06}";
              foreground = mkLiteral "${base05}";

              background-color = mkLiteral "${base00}";

              separatorcolor = mkLiteral "@foreground";
              border-color = mkLiteral "@lightfg";
              selected-normal-foreground = mkLiteral "@lightbg";
              selected-normal-background = mkLiteral "@lightfg";
              selected-active-foreground = mkLiteral "@background";
              selected-active-background = mkLiteral "@blue";
              selected-urgent-foreground = mkLiteral "@background";
              selected-urgent-background = mkLiteral "@red";
              normal-foreground = mkLiteral "@foreground";
              normal-background = mkLiteral "@background";
              active-foreground = mkLiteral "@blue";
              active-background = mkLiteral "@background";
              urgent-foreground = mkLiteral "@red";
              urgent-background = mkLiteral "@background";
              alternate-normal-foreground = mkLiteral "@foreground";
              alternate-normal-background = mkLiteral "@lightbg";
              alternate-active-foreground = mkLiteral "@blue";
              alternate-active-background = mkLiteral "@lightbg";
              alternate-urgent-foreground = mkLiteral "@red";
              alternate-urgent-background = mkLiteral "@lightbg";

              base-text = mkLiteral "${base05}";
              selected-normal-text = mkLiteral "${base01}";
              selected-active-text = mkLiteral "${base00}";
              selected-urgent-text = mkLiteral "${base00}";
              normal-text = mkLiteral "${base05}";
              active-text = mkLiteral "${base0D}";
              urgent-text = mkLiteral "${base08}";
              alternate-normal-text = mkLiteral "${base05}";
              alternate-active-text = mkLiteral "${base0D}";
              alternate-urgent-text = mkLiteral "${base08}";
            };

            # Holds the entire window
            "#window" = {
              transparency = "real"; background-color = mkLiteral "@background-color";
              #text-color = mkLiteral config.theme.colors.base07;
              border = mkLiteral "1px solid";
              border-color = mkLiteral "@border-color";
              border-radius = mkLiteral "4px";
              width = mkLiteral "850px";
              padding = mkLiteral "15px";
            };

            # Wrapper around bar and results
            "#mainbox" = {
              background-color = mkLiteral "@background-color";
              border = mkLiteral "0px";
              border-radius = mkLiteral "0px";
              border-color = mkLiteral "@border-color";
              children = map mkLiteral [
                "inputbar"
                "message"
                "listview"
              ];
              spacing = mkLiteral "10px";
              padding = mkLiteral "10px";
            };

            # Unknown
            "#textbox-prompt-colon" = {
              expand = false;
              str = ":";
              margin = mkLiteral "0px 0.3em 0em 0em";
              text-color = mkLiteral "inherit";
            };

            # Command prompt left of the input
            "#prompt" = {
              enabled = false;
            };

            # Actual text box
            "#entry" = {
              placeholder-color = mkLiteral "inherit";
              expand = true;
              horizontal-align = "0";
              placeholder = "";
              padding = mkLiteral "0px 0px 0px 5px";
              blink = true;
            };

            # Top bar
            "#inputbar" = {
              children = map mkLiteral [
                "prompt"
                "entry"
              ];
              border = mkLiteral "1px";
              border-radius = mkLiteral "4px";
              padding = mkLiteral "6px";
            };

            # Results
            "#listview" = {
              background-color = mkLiteral "transparent";
              padding = mkLiteral "0px";
              columns = 1;
              lines = 12;
              spacing = "5px";
              cycle = true;
              dynamic = true;
              layout = "vertical";
            };

            # Each result
            "#element" = {
              orientation = "vertical";
              border-radius = mkLiteral "0px";
              padding = mkLiteral "5px 0px 5px 5px";
            };
            "#element.selected" = {
              border = mkLiteral "1px";
              border-radius = mkLiteral "4px";
              #border-color = mkLiteral config.theme.colors.base07;
              background-color = mkLiteral "@selected-normal-background";
              text-color = mkLiteral "@selected-nomral-text"; 
            };

            "#element-text" = {
              expand = true;
              # horizontal-align = mkLiteral "0.5";
              vertical-align = mkLiteral "0.5";
              margin = mkLiteral "0px 2.5px 0px 2.5px";
            };
            "#element-text.selected" = {
              background-color = mkLiteral "inherit";
              text-color = mkLiteral "inherit";
            };

            # Not sure how to get icons
            "#element-icon" = {
              size = mkLiteral "18px";
              border = mkLiteral "0px";
              padding = mkLiteral "2px 5px 2px 2px";
              background-color = mkLiteral "@background-color";
            };
            "#element-icon.selected" = {
              background-color = mkLiteral "@background-color";
              text-color = mkLiteral "inherit";
            };
          };
        xoffset = 0;
        yoffset = -20;
        extraConfig = {
          show-icons = true;
          kb-cancel = "Escape,Super+space";
          #modi = "window,run,ssh,emoji,calc,systemd";
          modi = "drun,run,filebrowser";
          sort = true;
          # levenshtein-sort = true;
        };
      };

      #home.file.".config/rofi/themes" = {
      #  recursive = true;
      #  source = ../config/rofi/themes;
      #};
    #};

    #launcherCommand = ''${rofi}/bin/rofi -modes drun -show drun -theme-str '@import "launcher.rasi"' '';
    #systemdSearch = "${pkgs.rofi-systemd}/bin/rofi-systemd";
    #altTabCommand = "${rofi}/bin/rofi -show window -modi window";
    #calculatorCommand = "${rofi}/bin/rofi -modes calc -show calc";
    #audioSwitchCommand = "${
    #  (pkgs.writeShellApplication {
    #    name = "switch-audio";
    #    runtimeInputs = [
    #      pkgs.ponymix
    #      rofi
    #    ];
    #    text = builtins.readFile ./rofi/pulse-sink.sh;
    #  })
    #}/bin/switch-audio";
  #};
}
